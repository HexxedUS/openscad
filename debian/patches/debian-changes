This patch contains all the Debian-specific
changes mixed together. To review them
separately, please inspect the git history
at http://gitorious.org/openscad/
--- openscad-2015.03-1+dfsg.orig/openscad.pro
+++ openscad-2015.03-1+dfsg/openscad.pro
@@ -44,7 +44,7 @@ VERSIONDATE = 2015.04.21
 # If VERSION is not set, populate VERSION, VERSION_YEAR, VERSION_MONTH from system date
 include(version.pri)
 
-debug: DEFINES += DEBUG
+# debug: DEFINES += DEBUG
 
 TEMPLATE = app
 
--- openscad-2015.03-1+dfsg.orig/openscad.qrc
+++ openscad-2015.03-1+dfsg/openscad.qrc
@@ -29,7 +29,6 @@
     <file>icons/prefs3DView.png</file>
     <file>icons/prefsEditor.png</file>
     <file>icons/prefsUpdate.png</file>
-    <file>icons/flattr.png</file>
     <file>src/AboutDialog.html</file>
     <file>images/export.png</file>
     <file>images/axes.png</file>
--- openscad-2015.03-1+dfsg.orig/src/AboutDialog.h
+++ openscad-2015.03-1+dfsg/src/AboutDialog.h
@@ -11,8 +11,6 @@ public:
 	AboutDialog(QWidget *) {
 		setupUi(this);
 		this->setWindowTitle( QString(_("About OpenSCAD")) + " " + openscad_shortversionnumber.c_str());
-		QUrl flattr_qurl(":icons/flattr.png" );
-		this->aboutText->loadResource( QTextDocument::ImageResource, flattr_qurl );
 		QString tmp = this->aboutText->toHtml();
 		tmp.replace("__VERSION__", openscad_detailedversionnumber.c_str());
 		this->aboutText->setHtml(tmp);
--- openscad-2015.03-1+dfsg.orig/src/AboutDialog.html
+++ openscad-2015.03-1+dfsg/src/AboutDialog.html
@@ -15,7 +15,7 @@
 <body style="font-family:'Arial'; font-size:13pt;">
 
 <p>
-<a align=right href="https://flattr.com/submit/auto?user_id=openscad&amp;url=http://openscad.org&amp;title=OpenSCAD&amp;language=&amp;tags=github&amp;category=software"><img align=right src=":icons/flattr.png" /></a>
+<a align=right href="https://flattr.com/submit/auto?user_id=openscad&amp;url=http://openscad.org&amp;title=OpenSCAD&amp;language=&amp;tags=github&amp;category=software">Flattr this!</a>
 </p>
 
 <p>
--- /dev/null
+++ openscad-2015.03-1+dfsg/src/SparkleAutoUpdater.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2008 Remko Troncon. BSD license
+ * Copyright (C) 2013 Marius Kintel. BSD license
+ */
+#pragma once
+
+#include <QString>
+
+#include "AutoUpdater.h"
+
+class SparkleAutoUpdater : public AutoUpdater
+{
+	Q_OBJECT;
+public:
+	SparkleAutoUpdater();
+	~SparkleAutoUpdater();
+	
+	void checkForUpdates();
+	void setAutomaticallyChecksForUpdates(bool on);
+	bool automaticallyChecksForUpdates();
+	void setEnableSnapshots(bool on);
+	bool enableSnapshots();
+	QString lastUpdateCheckDate();
+
+private:
+	void updateFeed();
+
+	class Private;
+	Private *d;
+};
--- /dev/null
+++ openscad-2015.03-1+dfsg/src/SparkleAutoUpdater.mm
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2008 Remko Troncon. BSD license
+ * Copyright (C) 2013 Marius Kintel. BSD license
+ */
+
+#include "SparkleAutoUpdater.h"
+#include "PlatformUtils.h"
+
+#include <Cocoa/Cocoa.h>
+#include <Sparkle/Sparkle.h>
+
+NSString *const SUEnableSnapshotsKey = @"SUEnableSnapshots";
+
+class SparkleAutoUpdater::Private
+{
+public:
+  SUUpdater* updater;
+};
+
+SparkleAutoUpdater::SparkleAutoUpdater()
+{
+  d = new Private;
+
+  d->updater = [SUUpdater sharedUpdater];
+  [d->updater retain];
+
+  updateFeed();
+}
+
+SparkleAutoUpdater::~SparkleAutoUpdater()
+{
+  [d->updater release];
+  delete d;
+}
+
+void SparkleAutoUpdater::checkForUpdates()
+{
+  [d->updater checkForUpdatesInBackground];
+}
+
+void SparkleAutoUpdater::setAutomaticallyChecksForUpdates(bool on)
+{
+  [d->updater setAutomaticallyChecksForUpdates:on];
+}
+
+bool SparkleAutoUpdater::automaticallyChecksForUpdates()
+{
+  return [d->updater automaticallyChecksForUpdates];
+}
+
+void SparkleAutoUpdater::setEnableSnapshots(bool on)
+{
+  [[NSUserDefaults standardUserDefaults] setBool:on forKey:SUEnableSnapshotsKey];
+  updateFeed();
+}
+
+bool SparkleAutoUpdater::enableSnapshots()
+{
+  return [[NSUserDefaults standardUserDefaults] boolForKey:SUEnableSnapshotsKey];
+}
+
+QString SparkleAutoUpdater::lastUpdateCheckDate()
+{
+  NSDate *date = [d->updater lastUpdateCheckDate];
+  NSString *datestring = date ? [NSString stringWithFormat:@"Last checked: %@", date] : @"";
+  return QString::fromUtf8([datestring UTF8String]);
+}
+
+#define STRINGIFY(x) #x
+#define TOSTRING(x) STRINGIFY(x)
+
+void SparkleAutoUpdater::updateFeed()
+{
+  NSString *urlstring = [NSString stringWithFormat:@"http://files.openscad.org/appcast%@.xml", enableSnapshots() ? @"-snapshots" : @""];
+  [d->updater setFeedURL:[NSURL URLWithString:urlstring]];
+  NSString *userAgent = [NSString stringWithFormat:@"OpenSCAD %s %s", TOSTRING(OPENSCAD_VERSION), PlatformUtils::sysinfo(false).c_str()];
+  [d->updater setUserAgentString: userAgent];
+}
--- openscad-2015.03-1+dfsg.orig/tests/CMakeLists.txt
+++ openscad-2015.03-1+dfsg/tests/CMakeLists.txt
@@ -82,9 +82,9 @@ else()
 endif()
 
 # MCAD
-if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../libraries/MCAD/__init__.py)
-  message(FATAL_ERROR "MCAD not found. You can install from the OpenSCAD root as follows: \n  git submodule update --init")
-endif()
+#if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../libraries/MCAD/__init__.py)
+#  message(FATAL_ERROR "MCAD not found. You can install from the OpenSCAD root as follows: \n  git submodule update --init")
+#endif()
 
 # NULLGL - Allow us to build without OpenGL(TM). run 'cmake .. -DNULLGL=1'
 # Most tests will fail, but it can be used for testing/experiments
@@ -603,7 +603,7 @@ endif()
 add_definitions(-DOPENSCAD_TESTING -DENABLE_EXPERIMENTAL)
 
 # Search for MCAD in correct place
-set(CTEST_ENVIRONMENT "${CTEST_ENVIRONMENT};OPENSCADPATH=${CMAKE_CURRENT_SOURCE_DIR}/../libraries")
+#set(CTEST_ENVIRONMENT "${CTEST_ENVIRONMENT};OPENSCADPATH=${CMAKE_CURRENT_SOURCE_DIR}/../libraries")
 
 # Platform specific settings
 
--- openscad-2015.03-1+dfsg.orig/tests/test_cmdline_tool.py
+++ openscad-2015.03-1+dfsg/tests/test_cmdline_tool.py
@@ -1,5 +1,6 @@
+#!/usr/bin/python
 #
-# Regression test driver for cmd-line tools
+# regression test driver for cmd-line tools
 #
 # Usage: test_cmdline_tool.py [<options>] <tool> <arguments>
 #
--- openscad-2015.03-1+dfsg.orig/tests/test_pretty_print.py
+++ openscad-2015.03-1+dfsg/tests/test_pretty_print.py
@@ -81,18 +81,19 @@ def ezsearch(pattern, str):
     return ''
     
 def read_gitinfo():
+    return 'Installed OpenSCAD Debian packages:\n' + subprocess.check_output(['dpkg-query', '-l', 'openscad-*'])
     # won't work if run from outside of branch. 
-    try:
-        data = subprocess.Popen(['git', 'remote', '-v'], stdout=subprocess.PIPE).stdout.read()
-        origin = ezsearch('^origin *?(.*?)\(fetch.*?$', data)
-        upstream = ezsearch('^upstream *?(.*?)\(fetch.*?$', data)
-        data = subprocess.Popen(['git', 'branch'], stdout=subprocess.PIPE).stdout.read()
-        branch = ezsearch('^\*(.*?)$', data)
-        out = 'Git branch: ' + branch + ' from origin ' + origin + '\n'
-        out += 'Git upstream: ' + upstream + '\n'
-    except:
-        out = 'Git branch: Unknown (could not run git)\n'
-    return out
+    # try:
+    #     data = subprocess.Popen(['git', 'remote', '-v'], stdout=subprocess.PIPE).stdout.read()
+    #     origin = ezsearch('^origin *?(.*?)\(fetch.*?$', data)
+    #     upstream = ezsearch('^upstream *?(.*?)\(fetch.*?$', data)
+    #     data = subprocess.Popen(['git', 'branch'], stdout=subprocess.PIPE).stdout.read()
+    #     branch = ezsearch('^\*(.*?)$', data)
+    #     out = 'Git branch: ' + branch + ' from origin ' + origin + '\n'
+    #     out += 'Git upstream: ' + upstream + '\n'
+    # except:
+    #     out = 'Git branch: Unknown (could not run git)\n'
+    # return out
 
 def read_sysinfo(filename):
     data = tryread(filename)
@@ -198,7 +199,7 @@ def load_makefiles(builddir):
     files = [file for file in files if 'esting' not in file and 'emporary' not in file]
     result = {}
     for fname in files:
-        result[fname.replace(builddir, '')] = tryread(fname)
+        result[fname] = tryread(fname)
     return result
 
 
--- openscad-2015.03-1+dfsg.orig/xcode/OpenSCAD.xcodeproj/xcshareddata/xcschemes/OpenSCAD.app.xcscheme
+++ openscad-2015.03-1+dfsg/xcode/OpenSCAD.xcodeproj/xcshareddata/xcschemes/OpenSCAD.app.xcscheme
@@ -49,8 +49,7 @@
       ignoresPersistentStateOnLaunch = "NO"
       debugDocumentVersioning = "YES"
       allowLocationSimulation = "YES">
-      <BuildableProductRunnable
-         runnableDebuggingMode = "0">
+      <BuildableProductRunnable>
          <BuildableReference
             BuildableIdentifier = "primary"
             BlueprintIdentifier = "E0034E3D19AA8651009F0BD0"
@@ -70,15 +69,15 @@
          </CommandLineArgument>
          <CommandLineArgument
             argument = "testdata/scad/3D/issues/issue1061.scad -o out.png"
-            isEnabled = "NO">
+            isEnabled = "YES">
          </CommandLineArgument>
          <CommandLineArgument
             argument = "testdata/scad/3D/issues/minkowski-thin-cylinder.scad -o out.png"
             isEnabled = "NO">
          </CommandLineArgument>
          <CommandLineArgument
-            argument = "issue1276.scad"
-            isEnabled = "YES">
+            argument = "spheres.scad -o out.png"
+            isEnabled = "NO">
          </CommandLineArgument>
          <CommandLineArgument
             argument = "non-manifold2.scad -o non-manifold2.stl --debug=GeometryUtils"
@@ -114,8 +113,7 @@
       useCustomWorkingDirectory = "NO"
       buildConfiguration = "Release"
       debugDocumentVersioning = "YES">
-      <BuildableProductRunnable
-         runnableDebuggingMode = "0">
+      <BuildableProductRunnable>
          <BuildableReference
             BuildableIdentifier = "primary"
             BlueprintIdentifier = "E0034E3D19AA8651009F0BD0"
